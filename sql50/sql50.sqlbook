-- SQLBook: Markup
# 596. Classes More Than 5 Students

This section contains the SQL schema and sample data for the Leetcode problem "596. Classes More Than 5 Students". The goal is to identify classes with more than five students enrolled.
-- SQLBook: Markup
The following insert statements provide sample data for the `Courses` table, representing students and their enrolled classes.
-- SQLBook: Code
#1757. Recyclable and Low Fat Products
select product_id
from Products 
where 
low_fats = 'Y' 
and 
recyclable = 'Y';
-- SQLBook: Code
#584. Find Customer Referee

select c1.name from Customer c1
where c1.referee_id!=2 || c1.referee_id is NULL
-- SQLBook: Code
-- 595. Big Countries

select name, population, area from World where
area >= 3000000 ||
population >= 25000000
-- SQLBook: Code
#1148. Article Views I
# Write your MySQL query statement below
select author_id as id from Views 
where viewer_id=author_id group by id order by id
-- SQLBook: Code
-- 1683. Invalid Tweets

select tweet_id from Tweets where length(content)>15
-- SQLBook: Code
-- 1378. Replace Employee ID With The Unique Identifier

select unique_id, name from Employees e 
left join EmployeeUNI u on e.id=u.id
-- SQLBook: Code
-- 1581. Customer Who Visited but Did Not Make Any Transactions

select customer_id, count(*) as count_no_trans
from Visits v
where v.visit_id not in (select visit_id from Transactions)
group by customer_id
-- SQLBook: Code
-- 197. Rising Temperature

select 
d2.id
from Weather d1
inner join Weather d2 on
DATEDIFF(d2.recordDate, d1.recordDate)=1 
and d1.temperature < d2.temperature
group by d1.id

-- SQLBook: Code
-- 1661. Average Time of Process per Machine

# Write your MySQL query statement below
select t1.machine_id, round(avg(t2.timestamp-t1.timestamp),3) as processing_time
from Activity t1 
inner join Activity t2 on 
t1.machine_id = t2.machine_id and 
t1.process_id = t2.process_id
where t1.activity_type = 'start' and
t2.activity_type='end' group by t1.machine_id

-- SQLBook: Code
-- 577. Employee Bonus

# Write your MySQL query statement below
select name, bonus from Employee e
left join Bonus b on b.empId=e.empId
where bonus < 1000 || bonus is null
-- SQLBook: Code
-- 1280. Students and Examinations


select 
s.student_id, 
s.student_name, 
j.subject_name, 
count(e.student_id) as attended_exams
from Students s
    cross join Subjects j
    left join Examinations e on e.student_id=s.student_id and
    j.subject_name = e.subject_name
group by s.student_name, j.subject_name order by student_id, student_name, subject_name

-- SQLBook: Code
-- 570. Managers with at Least 5 Direct Reports

select e1.name from Employee e1
inner join Employee e2 on e1.id=e2.managerId
group by e1.id having count(e2.managerId) >= 5
-- SQLBook: Code
-- 1934. Confirmation Rate

# TODO - Refazer

#The confirmation rate of a user is the number of 'confirmed' 
#messages divided by the total number of requested confirmation messages

-- WRONG APROACH
select 
s.user_id, 
count(c.action) as confirmed, # Write your MySQL query statement below
select
p.product_id,
units,
price,
purchase_date
from Prices p
join UnitsSold u
on u.product_id = p.product_id

group by distinct concat(product_id, price, purchase_date)''
count(t.action) as timed_out,
coalesce(
    count(c.action)/
    (count(t.action)+count(c.action)), 
    0
    ) as confirmation_rate from Signups s
    left join Confirmations c
    on s.user_id=c.user_id and  c.action='confirmed'
    left join Confirmations t
    on s.user_id = t.user_id and t.action='timeout'
    group by s.user_id

------------------------------------------------------
SELECT
  s.user_id,
round(COALESCE(
  COALESCE(c.confirmed, 0) * 1.0 / NULLIF(COALESCE(c.confirmed, 0) + COALESCE(t.timed_out, 0), 0),
  0
), 2)AS confirmation_rate
FROM Signups s
LEFT JOIN (
  SELECT user_id, COUNT(*) AS confirmed
  FROM Confirmations
  WHERE action = 'confirmed'
  GROUP BY user_id
) c ON s.user_id = c.user_id
LEFT JOIN (
  SELECT user_id, COUNT(*) AS timed_out
  FROM Confirmations
  WHERE action = 'timeout'
  GROUP BY user_id
) t ON s.user_id = t.user_id;


-------------------------------------------------

SELECT
  s.user_id,
  SUM(c.action = 'confirmed') AS confirmed,
  SUM(c.action = 'timeout') AS timed_out,
ROUND(
  IFNULL(SUM(c.action = 'confirmed') / NULLIF(COUNT(c.action), 0), 0)
, 2) as confirmation_rates
FROM Signups s
LEFT JOIN Confirmations c
  ON s.user_id = c.user_id
GROUP BY s.user_id;
-- SQLBook: Code
-- 620. Not Boring Movies
select
id,
movie,
description,
rating
from Cinema
where description <> 'boring' and id % 2 <> 0 
order by rating desc
-- SQLBook: Code
-- 1251. Average Selling Price

# TODO - Refazer esse aq pra relembrar do pq as condiçẽos de filtragem devem ser todas no on

select
p.product_id,
ifnull(round(sum(price*units)/sum(units),2),0) as average_price
from Prices p
left join UnitsSold u on u.product_id = p.product_id
and purchase_date between start_date and end_date
group by p.product_id
-- SQLBook: Code
-- 1075. Project Employees I
select
project_id,
round(avg(experience_years),2) as average_years
from Employee e
join Project p
on p.employee_id = e.employee_id
group by project_id order by project_id 
-- SQLBook: Code
-- 1633. Percentage of Users Attended a Contest

select 
r.contest_id,
coalesce(
    round(
        count(r.user_id)/(select count(*) from Users)*100, 
        2),
       0) as percentage
from Users u
join Register r
on r.user_id = u.user_id
group by r.contest_id order by percentage desc, contest_id asc
-- SQLBook: Code
-- 1211. Queries Quality and Percentage


select 
query_name,
round(avg(
    rating/position
),2) as quality,
round(sum(rating < 3)/count(*)*100,2) as poor_query_percentage
from
Queries q
group by query_name

-- SQLBook: Code
-- 1193. Monthly Transactions I

select
DATE_FORMAT(trans_date, "%Y-%m") as month,
country,
count(*) as trans_count,
sum(`state`='approved') as approved_count,
sum(amount) as trans_total_amount,
-- sum(CASE WHEN state = 'approved' THEN amount ELSE 0 END) as approved_total_amount
sum((`state`='approved')*amount) approved_total_amount
from Transactions t
group by country, DATE_FORMAT(trans_date, "%Y-%m")

-- SQLBook: Code
-- 1174. Immediate Food Delivery II

#TODO

select
round(
    sum(d1.order_date=d1.customer_pref_delivery_date)
    /count(*) * 100
    ,2) as immediate_percentage
from Delivery d1
join (
select customer_id, min(order_date) as first_order_date from Delivery 
group by customer_id
) d2 on d1.customer_id = d2.customer_id and d1.order_date = d2.first_order_date

-- SQLBook: Code
-- 550. Game Play Analysis IV

#TODO refazer para lembrrar do date_add, como filtrar corretamente a data


select
round(
    count(a.player_id)
    /(select count(distinct player_id) from Activity)
    ,2) as fraction
from Activity a
join (
    select min(event_date) as first_login, player_id from Activity
    group by player_id
) a2 on a.event_date=date_add(first_login, interval 1 day) and
a2.player_id = a.player_id

-- SQLBook: Code
-- 2356. Number of Unique Subjects Taught by Each Teacher

select
teacher_id,
count(distinct subject_id) as cnt
from Teacher group by teacher_id

-- SQLBook: Code
-- 1141. User Activity for the Past 30 Days I

select
activity_date as day,
count(distinct user_id) as active_users
from Activity
where activity_date between date_add('2019-07-28', interval -30 day) 
and '2019-07-27'
group by extract(day from activity_date)
order by activity_date
-- SQLBook: Code
-- 1070. Product Sales Analysis III


select
s1.product_id,
s1.year as first_year,
quantity,
price
from Sales s1
join (
    select min(year) as year, product_id from Sales group by product_id 
) s2 on s1.product_id=s2.product_id and s1.year=s2.year
group by sale_id
-- SQLBook: Code
-- Active: 1746542496422@@127.0.0.1@3306@Leetcode
-- 596. Classes More Than 5 Students

# Dump structure
Create table If Not Exists Courses (
    student varchar(255),
    class varchar(255)
);-- Truncate table Courses
insert into Courses (student, class) values ('A', 'Math');

insert into Courses (student, class) values ('B', 'English');

insert into Courses (student, class) values ('C', 'Math');

insert into Courses (student, class) values ('D', 'Biology');

insert into Courses (student, class) values ('E', 'Math');

insert into Courses (student, class) values ('F', 'Computer');

insert into Courses (student, class) values ('G', 'Math');

insert into Courses (student, class) values ('H', 'Math');

insert into Courses (student, class) values ('I', 'Math');